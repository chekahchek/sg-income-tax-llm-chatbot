package chatbot

import org.jsoup._
import collection.JavaConverters._
import sttp.client4.quick._
import sttp.model.StatusCode
//import Database.createDbSession
//import dataclass.DbConfig
//import pureconfig.ConfigSource
//import pureconfig.generic.auto._
//import skunk._
//import skunk.implicits._
//import skunk.codec.all._
//import cats.effect.IO
import upickle.default._

object WebScrape {
  // HuggingFace models for tokenization
  private val embeddingModel = "sentence-transformers/all-MiniLM-L6-v2"
  private val embeddingUrl = s"https://api-inference.huggingface.co/pipeline/feature-extraction/$embeddingModel"

  // Sites to scrape
  val excludedContents = List("FAQs", "Related Content")
  val websites : List[String] = List(
    "https://www.iras.gov.sg/taxes/individual-income-tax/basics-of-individual-income-tax/tax-reliefs-rebates-and-deductions/tax-reliefs/earned-income-relief"
  )


  def scrapeWebsite(site: String): Either[Throwable, String] = {
    try {
      val doc = Jsoup.connect(site)
        .timeout(10000)
        .userAgent("Mozilla/5.0")
        .get()

      val resultsBuffer = doc.select("section").asScala.flatMap { section =>
        val h2 = section.select("h2")
        if (h2.attr("id").startsWith("title") &&
          !excludedContents.exists(exclude => h2.text().contains(exclude)))
          Some(section.text())
        else None
      }

      val results = resultsBuffer.mkString("\n")
      if (results.isEmpty) {
        Left(new Exception("No content extracted from the website"))
      } else {
        Right(results)
      }
    } catch {
      case e: Throwable => Left(e)
    }
  }


  def getEmbeddings(text: String): Either[Throwable, Array[Double]] = {
    try {
      val token = sys.env.getOrElse("HF_TOKEN",
        throw new Exception("HF_TOKEN environment variable not set"))

      val response = quickRequest
        .post(uri"$embeddingUrl")
        .auth.bearer(token)
        .body(text)
        .send()

      response.code match {
        case StatusCode.Ok => Right(response.body.map(_.toDouble).toArray)
        case _ => Left(new Exception(s"Failed to get embeddings: ${response.statusText}"))
      }
    } catch {
      case e: Throwable => Left(e)
    }


  }


  //Right([-0.07247605174779892,0.007407671306282282,0.049789007753133774,-0.012558738701045513,-0.004061868879944086,0.113536536693573,0.03652666136622429,0.06411426514387131,-0.10685577988624573,-0.013028777204453945,0.02068405970931053,-0.04983164370059967,-0.00034517800668254495,0.031053820624947548,0.004217743873596191,0.09488490968942642,0.01856881193816662,0.018530990928411484,0.0006458929274231195,0.016596466302871704,0.1254662126302719,0.0556577704846859,-0.07426012307405472,-0.07024599611759186,0.05285164713859558,0.032335586845874786,-0.008054154925048351,-0.0009494220721535385,0.11823955923318863,0.04147885739803314,0.08284443616867065,0.01119596604257822,-0.035307977348566055,-0.037631817162036896,0.02616509422659874,0.006776527967303991,-0.0270036943256855,0.0665290430188179,-0.011061634868383408,-0.006119497586041689,-0.02431160770356655,-0.051231808960437775,-0.009014665149152279,-0.1085706576704979,0.06480314582586288,-0.07267118990421295,-0.019181104376912117,-0.05433423072099686,0.019944598898291588,0.020772526040673256,0.052782002836465836,0.03730582818388939,0.06841964274644852,0.10662147402763367,-0.04945360869169235,-0.05665592476725578,-0.019941000267863274,0.004127502907067537,-0.015453348867595196,0.033450495451688766,-0.04700687527656555,-0.09410928934812546,0.07835376262664795,-0.060151826590299606,-0.06986438482999802,-0.003445055102929473,0.020988615229725838,-0.08705395460128784,-0.048338767141103745,-0.06829336285591125,-0.13231557607650757,-0.04910412058234215,-0.008973641321063042,-0.06422868371009827,0.05199376866221428,-0.045386720448732376,0.018235988914966583,0.04159805551171303,0.0077263484708964825,-0.06476067751646042,0.014794018119573593,0.09420716762542725,-0.03990144282579422,0.02767897956073284,0.001568354433402419,-0.03014921210706234,-0.06636804342269897,0.0558314174413681,0.03122415952384472,0.049278825521469116,0.022558201104402542,0.016820063814520836,-0.015889346599578857,-0.007198112551122904,0.018782587721943855,-0.06684774905443192,0.04819148778915405,-0.07342279702425003,0.0014511080225929618,0.02040514349937439,-0.04702721908688545,-0.04210429638624191,-0.03619731217622757,-0.015412425622344017,0.021233556792140007,-0.04989374801516533,0.028355984017252922,-0.02015051804482937,-0.028043976053595543,-0.0017405636608600616,0.024021295830607414,0.015048529952764511,-0.04306429997086525,0.01252654753625393,-0.07509978860616684,0.009201412089169025,-0.04830281808972359,-0.014747566543519497,0.06746640056371689,0.013388896360993385,0.08170560002326965,0.0893455296754837,0.07650065422058105,0.08509060740470886,0.013863317668437958,-0.03273271769285202,0.024860043078660965,5.1549023561586854e-33,0.1232733428478241,0.0681571364402771,0.024340074509382248,0.02342822216451168,0.010666457004845142,-0.04838651046156883,0.04863179475069046,0.004742846824228764,0.04751039668917656,-0.003895130241289735,-0.027750549837946892,0.1179146096110344,0.08055223524570465,-0.06983743607997894,-0.009429932571947575,0.052957214415073395,0.015078878030180931,-0.01516907662153244,-0.038421258330345154,0.0352439358830452,0.07628445327281952,-0.07286935299634933,0.057531505823135376,0.07152184098958969,0.006044905167073011,0.034896522760391235,-0.03540002927184105,-0.028176339343190193,-0.029376622289419174,-0.010894887149333954,-0.017490224912762642,0.009059710428118706,0.06558796763420105,-0.14483994245529175,0.02523331344127655,0.03590923547744751,-0.023566897958517075,-0.012299462221562862,-0.0066553885117173195,-0.02692662551999092,-0.07245384156703949,0.024786461144685745,0.12195463478565216,-0.010698693804442883,0.0038497834466397762,-0.029113411903381348,0.08250084519386292,-0.07155134528875351,-0.03509151190519333,0.03656817600131035,0.003494109958410263,0.01830640807747841,-0.02830103039741516,-0.07902145385742188,-0.0758621096611023,-0.06850370019674301,-0.08216866105794907,0.012690906412899494,0.0513751357793808,0.043561600148677826,-0.028405899181962013,-0.10795044898986816,0.040578361600637436,-0.039446961134672165,0.008419842459261417,0.049263399094343185,0.010016575455665588,0.01983601413667202,-0.007830864749848843,0.023281408473849297,-0.03539888560771942,-0.0145925497636199,0.06233348697423935,-0.052965663373470306,0.00351189193315804,0.04550868272781372,0.013396977446973324,-0.026988904923200607,-0.011060984805226326,0.008926887065172195,-0.014125483110547066,-0.027315303683280945,-0.035325054079294205,-0.03823663294315338,0.12860840559005737,0.07910384982824326,-0.03730924800038338,0.001970436656847596,-0.010850457474589348,-0.12305668741464615,0.012054964900016785,-0.05288160592317581,0.036277420818805695,-0.04511205106973648,0.0014174471143633127,-6.408557897761039e-33,0.014099054969847202,0.05578422173857689,-0.05535465106368065,-0.05986721068620682,0.022951796650886536,-0.035244956612586975,0.07696809619665146,0.028079772368073463,-0.05081086978316307,0.04557359963655472,-0.039582446217536926,0.026556862518191338,0.0036713581066578627,0.051464952528476715,-0.11746689677238464,0.04534976929426193,-0.09436056017875671,0.054875485599040985,-0.0053145852871239185,0.01865880750119686,-0.007282232865691185,0.13714416325092316,0.03223346546292305,0.06188513711094856,0.03730619698762894,0.06776274740695953,0.00025975119206123054,-0.0006697569042444229,0.002158186864107847,0.04771307483315468,0.04024935141205788,0.008016013540327549,-0.050282642245292664,-0.026648323982954025,0.02005554549396038,-0.05556677281856537,-0.056641001254320145,-0.06119140237569809,0.007567797787487507,-0.028399616479873657,0.06155147776007652,-0.011565480381250381,-0.03292742371559143,0.03926077112555504,0.01788557879626751,-0.02997182309627533,-0.00010873912833631039,-0.002219345886260271,-0.01812761276960373,-0.03400599583983421,0.10661152005195618,0.00930599495768547,0.10015296190977097,0.09444153308868408,0.008307055570185184,-0.05427819862961769,-0.043345071375370026,-0.09417209029197693,-0.062028538435697556,-0.023696085438132286,-0.0060921357944607735,0.022549381479620934,-0.0494270995259285,0.06048435717821121,-0.010309027507901192,-0.0548982210457325,-5.983198570902459e-05,-0.04483073204755783,-0.014494934119284153,-0.07556544989347458,0.0006992754060775042,-0.04249086230993271,0.05556518957018852,-0.08031966537237167,0.011088624596595764,0.09480958431959152,0.08625641465187073,0.02726135402917862,-0.009551293216645718,0.02146240882575512,-0.07105851173400879,-0.06126515939831734,0.003423682413995266,0.02426227182149887,-0.05733346939086914,0.005922169424593449,0.009168428368866444,-0.03546332195401192,0.022977454587817192,0.028037667274475098,-0.05653870105743408,0.045304618775844574,-0.027622930705547333,0.07956942170858383,0.06431551277637482,-5.3063384797269464e-08,0.0736529529094696,0.06215371936559677,-0.1295015662908554,-0.033189401030540466,-0.05376219004392624,-0.015801673755049706,-0.10924462229013443,-0.06622499227523804,-0.0011537264799699187,-0.0456031896173954,0.07142295688390732,-0.0021605053916573524,0.0741388127207756,-0.053033262491226196,0.02728002890944481,0.03502702713012695,0.02984766475856304,0.05692208558320999,-0.002580957720056176,0.03296034410595894,0.005612698383629322,-0.09341225773096085,0.0003417094412725419,0.015491850674152374,-0.03694510832428932,-0.02635662816464901,0.0756269320845604,-0.0089420722797513,-0.033201076090335846,-0.0959760770201683,-0.04214278608560562,-0.006231754086911678,-0.013458707369863987,0.06362849473953247,0.050988223403692245,-0.001834921888075769,0.01576412282884121,-0.02930673398077488,-0.03292778134346008,0.03235064446926117,0.010941942222416401,0.025916824117302895,0.0020476290956139565,-0.028192739933729172,-0.0806669220328331,0.004942021332681179,-0.13578690588474274,-0.0752767026424408,0.001086494536139071,-0.016326693817973137,-0.0033415129873901606,-0.0013790064258500934,0.009602000005543232,0.0023951393086463213,-0.008344815112650394,0.023857884109020233,-0.039294809103012085,-0.053706422448158264,-0.05110824853181839,0.0030777824576944113,0.06902866065502167,-0.04605070501565933,-0.0483151450753212,-0.024440823122859])


  def main(args: Array[String]): Unit = {
//    val config: DbConfig = ConfigSource.default.at("db").loadOrThrow[DbConfig]
//    val session = createDbSession(config)

    for (site <- websites) {
      val contents = scrapeWebsite(site)
      assert (contents.isRight, s"Failed to scrape website: ${contents.left.get}")
      val embeddings = getEmbeddings(contents.getOrElse(""))
      println(s"Embeddings: $embeddings")
//      val insertQuery =
//        sql"""INSERT INTO tax(content, embedding) VALUES ($contents, $embeddings)""".command
//
//      session.run(insertQuery)

      }
    }

}
